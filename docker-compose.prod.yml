version: '3.8'

services:
  db:
    image: postgres:15
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-humanlink}
      POSTGRES_USER: ${POSTGRES_USER:-humanlink}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-humanlink123}
    networks:
      - humanlink-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-humanlink}" ]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput --clear &&
             gunicorn core.wsgi:application --bind 0.0.0.0:8000 --workers 3"
    ports:
      - "8000:8000"
    environment:
      - DEBUG=False
      - DATABASE_URL=postgres://${POSTGRES_USER:-humanlink}:${POSTGRES_PASSWORD:-humanlink123}@db:5432/${POSTGRES_DB:-humanlink}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - ENVIRONMENT=production
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - POSTMARK_API_KEY=${POSTMARK_API_KEY:-}
      - POSTMARK_SENDER_EMAIL=${POSTMARK_SENDER_EMAIL:-}
      - SENTRY_DSN=${SENTRY_DSN:-}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - humanlink-network
    volumes:
      - static_volume:/app/staticfiles

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - ./ssl:/etc/ssl/certs
    depends_on:
      - web
    networks:
      - humanlink-network

volumes:
  postgres_data:
  static_volume:


networks:
  humanlink-network:
    driver: bridge
